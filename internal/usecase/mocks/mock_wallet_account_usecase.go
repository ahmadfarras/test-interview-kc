// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/wallet_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	request "test-interview-kc/internal/dto/request"
	response "test-interview-kc/internal/dto/response"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletWithdrawalUseCase is a mock of WalletWithdrawalUseCase interface.
type MockWalletWithdrawalUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockWalletWithdrawalUseCaseMockRecorder
}

// MockWalletWithdrawalUseCaseMockRecorder is the mock recorder for MockWalletWithdrawalUseCase.
type MockWalletWithdrawalUseCaseMockRecorder struct {
	mock *MockWalletWithdrawalUseCase
}

// NewMockWalletWithdrawalUseCase creates a new mock instance.
func NewMockWalletWithdrawalUseCase(ctrl *gomock.Controller) *MockWalletWithdrawalUseCase {
	mock := &MockWalletWithdrawalUseCase{ctrl: ctrl}
	mock.recorder = &MockWalletWithdrawalUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletWithdrawalUseCase) EXPECT() *MockWalletWithdrawalUseCaseMockRecorder {
	return m.recorder
}

// Withdraw mocks base method.
func (m *MockWalletWithdrawalUseCase) Withdraw(ctx context.Context, req request.WalletWithdrawalRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWalletWithdrawalUseCaseMockRecorder) Withdraw(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWalletWithdrawalUseCase)(nil).Withdraw), ctx, req)
}

// MockWalletAccountUseCase is a mock of WalletAccountUseCase interface.
type MockWalletAccountUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockWalletAccountUseCaseMockRecorder
}

// MockWalletAccountUseCaseMockRecorder is the mock recorder for MockWalletAccountUseCase.
type MockWalletAccountUseCaseMockRecorder struct {
	mock *MockWalletAccountUseCase
}

// NewMockWalletAccountUseCase creates a new mock instance.
func NewMockWalletAccountUseCase(ctrl *gomock.Controller) *MockWalletAccountUseCase {
	mock := &MockWalletAccountUseCase{ctrl: ctrl}
	mock.recorder = &MockWalletAccountUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletAccountUseCase) EXPECT() *MockWalletAccountUseCaseMockRecorder {
	return m.recorder
}

// GetAccountDetails mocks base method.
func (m *MockWalletAccountUseCase) GetAccountDetails(ctx context.Context, accountID string) (response.WalletAccountDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDetails", ctx, accountID)
	ret0, _ := ret[0].(response.WalletAccountDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDetails indicates an expected call of GetAccountDetails.
func (mr *MockWalletAccountUseCaseMockRecorder) GetAccountDetails(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDetails", reflect.TypeOf((*MockWalletAccountUseCase)(nil).GetAccountDetails), ctx, accountID)
}
