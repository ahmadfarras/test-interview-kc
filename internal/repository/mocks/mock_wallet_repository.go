// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/wallet_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	domain "test-interview-kc/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletTransactionRepository is a mock of WalletTransactionRepository interface.
type MockWalletTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletTransactionRepositoryMockRecorder
}

// MockWalletTransactionRepositoryMockRecorder is the mock recorder for MockWalletTransactionRepository.
type MockWalletTransactionRepositoryMockRecorder struct {
	mock *MockWalletTransactionRepository
}

// NewMockWalletTransactionRepository creates a new mock instance.
func NewMockWalletTransactionRepository(ctrl *gomock.Controller) *MockWalletTransactionRepository {
	mock := &MockWalletTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockWalletTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletTransactionRepository) EXPECT() *MockWalletTransactionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWalletTransactionRepository) Create(ctx context.Context, tx *domain.WalletTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWalletTransactionRepositoryMockRecorder) Create(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletTransactionRepository)(nil).Create), ctx, tx)
}

// IsAlreadyProcessed mocks base method.
func (m *MockWalletTransactionRepository) IsAlreadyProcessed(ctx context.Context, transactionID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlreadyProcessed", ctx, transactionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlreadyProcessed indicates an expected call of IsAlreadyProcessed.
func (mr *MockWalletTransactionRepositoryMockRecorder) IsAlreadyProcessed(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyProcessed", reflect.TypeOf((*MockWalletTransactionRepository)(nil).IsAlreadyProcessed), ctx, transactionID)
}

// MockWalletAccountRepository is a mock of WalletAccountRepository interface.
type MockWalletAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletAccountRepositoryMockRecorder
}

// MockWalletAccountRepositoryMockRecorder is the mock recorder for MockWalletAccountRepository.
type MockWalletAccountRepositoryMockRecorder struct {
	mock *MockWalletAccountRepository
}

// NewMockWalletAccountRepository creates a new mock instance.
func NewMockWalletAccountRepository(ctrl *gomock.Controller) *MockWalletAccountRepository {
	mock := &MockWalletAccountRepository{ctrl: ctrl}
	mock.recorder = &MockWalletAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletAccountRepository) EXPECT() *MockWalletAccountRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockWalletAccountRepository) GetByID(ctx context.Context, accountID string) (*domain.WalletAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, accountID)
	ret0, _ := ret[0].(*domain.WalletAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockWalletAccountRepositoryMockRecorder) GetByID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockWalletAccountRepository)(nil).GetByID), ctx, accountID)
}

// Update mocks base method.
func (m *MockWalletAccountRepository) Update(ctx context.Context, account *domain.WalletAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWalletAccountRepositoryMockRecorder) Update(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWalletAccountRepository)(nil).Update), ctx, account)
}
